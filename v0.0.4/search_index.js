var documenterSearchIndex = {"docs":
[{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This page serves as the contribution guide for the DCCR package. From top to bottom, the ways of contributing are:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"GitHub Issues: how to raise an issue with the project.\nJulia Development: how to download and interact with the package.\nGitFlow: how to directly contribute code to the package in an organized way on GitHub.\nDevelopment Details: how the internals of the package are currently setup if you would like to directly contribute code.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Please also see the Attribution to learn about the authors and sources of support for the project.","category":"page"},{"location":"man/contributing/#Issues","page":"Contributing","title":"Issues","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The main point of contact is the GitHub issues page for the project. This is the easiest way to contribute to the project, as any issue you find or request you have will be addressed there by the authors of the package. Depending on the issue, the authors will collaborate with you, and after making changes they will link a pull request which addresses your concern or implements your proposed changes.","category":"page"},{"location":"man/contributing/#Julia-Development","page":"Contributing","title":"Julia Development","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"As a Julia package, development follows the usual procedure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Clone the project from GitHub\nSwitch to or create the branch that you wish work on (see GitFlow).\nStart Julia at your development folder.\nInstantiate the package (i.e., download and install the package dependencies).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For example, you can get the package and startup Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"git clone git@github.com:AP6YC/DCCR.jl.git\njulia --project=.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn Julia, you must activate your project in the current REPL to point to the location/scope of installed packages. The above immediately activates the project when starting up Julia, but you may also separately startup the julia and activate the package with the interactive package manager via the ] syntax:julia\njulia> ]\n(@v1.9) pkg> activate .\n(DCCR) pkg>","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"You may run the package's unit tests after the above setup in Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> using Pkg\njulia> Pkg.instantiate()\njulia> Pkg.test()","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"or interactively though the Julia package manager with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(DCCR) pkg> instantiate\n(DCCR) pkg> test","category":"page"},{"location":"man/contributing/#GitFlow","page":"Contributing","title":"GitFlow","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The DCCR package follows the GitFlow git working model. The original post by Vincent Driessen outlines this methodology quite well, while Atlassian has a good tutorial as well. In summary:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Create a feature branch off of the develop branch with the name feature/<my-feature-name>.\nCommit your changes and push to this feature branch.\nWhen you are satisfied with your changes, initiate a GitHub pull request (PR) to merge the feature branch with develop.\nIf the unit tests pass, the feature branch will first be merged with develop and then be deleted.\nReleases will be periodically initiated from the develop branch and versioned onto the master branch.\nImmediate bug fixes circumvent this process through a hotfix branch off of master.","category":"page"},{"location":"man/contributing/#Development-Details","page":"Contributing","title":"Development Details","text":"","category":"section"},{"location":"man/contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"These docs are currently hosted as a static site on the GitHub pages platform. They are setup to be built and served in a separate branch called gh-pages from the master/development branches of the project.","category":"page"},{"location":"man/contributing/#Package-Structure","page":"Contributing","title":"Package Structure","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The DCCR project has the following file structure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"DCCR\n├── .github/workflows       // GitHub: workflows for testing and documentation.\n├── cluster                 // CI: cluster submission files and scripts.\n├── data                    // Data: original datsets.\n│   ├───packed              //      Compressed tarballs of datasets.\n│   └───unpacked            //      Decompressed datasets.\n├── dockerfiles             // CI: Docker image definitions.\n├── docs                    // Docs: documentation for the module.\n│   └───src                 //      Documentation source files.\n├── src                     // Source: majority of source code.\n├── test                    // Test: Unit, integration, and environment tests.\n├── work                    // Data: options and generated results.\n│   ├───configs             //      Experiment configuration files.\n│   ├───models              //      Saved model weights.\n│   └───results             //      Destination for generated figures, etc.\n├── .gitattributes          // Git: LFS settings, languages, etc.\n├── .gitignore              // Git: .gitignore for the whole project.\n├── CODE_OF_CONDUCT.md      // Doc: the code of conduct for contributors.\n├── CONTRIBUTING.md         // Doc: contributing guide (points to this page).\n├── LICENSE                 // Doc: the license to the project.\n├── Project.toml            // Julia: the Pkg.jl dependencies of the project.\n└── README.md               // Doc: the top-level readme for the project.","category":"page"},{"location":"man/contributing/#Type-Aliases","page":"Contributing","title":"Type Aliases","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For convenience in when defining types and function signatures, this package uses the NumericalTypeAliases.jl package and the aliases therein. The documentation for the abstract and concrete types provided by NumericalTypeAliases.jl can be found here.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"In this package, data samples are always Real-valued, whereas class labels are integered. Furthermore, independent class labels are always Int because of the Julia native support for a given system's signed native integer type.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This project does not currently test for the support of arbitrary precision arithmetic because learning algorithms in general do not have a significant need for precision.","category":"page"},{"location":"man/contributing/#Attribution","page":"Contributing","title":"Attribution","text":"","category":"section"},{"location":"man/contributing/#Authors","page":"Contributing","title":"Authors","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This package is developed and maintained by Sasha Petrenko with sponsorship by the Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"If you simply have suggestions for improvement, Sasha Petrenko (<petrenkos@mst.edu>) is the current developer and maintainer of the DCCR package, so please feel free to reach out with thoughts and questions.","category":"page"},{"location":"man/dev-index/#dev-main-index","page":"Dev Index","title":"Developer Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This page lists the types and functions that are internal to the DCCR package. Because they are not part of the public API, these names might change relatively frequently between versions and so should not be relied upon.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"All internal names are listed in the Index, and each of these entries link to the docstrings in the Docs section.","category":"page"},{"location":"man/dev-index/#Index","page":"Dev Index","title":"Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This section contains a list of internal names that link to their corresponding Documentation.","category":"page"},{"location":"man/dev-index/#dev-index-methods","page":"Dev Index","title":"Methods","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DCCR]\nOrder = [:function]","category":"page"},{"location":"man/dev-index/#dev-index-types","page":"Dev Index","title":"Types","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DCCR]\nOrder = [:type]","category":"page"},{"location":"man/dev-index/#dev-index-types-2","page":"Dev Index","title":"Constants","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DCCR]\nOrder = [:constant]","category":"page"},{"location":"man/dev-index/#dev-index-docs","page":"Dev Index","title":"Docs","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Documentation for all internal names are listed below.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Modules = [DCCR]\nPublic = false","category":"page"},{"location":"man/dev-index/#DCCR.ARG_BOUNDS","page":"Dev Index","title":"DCCR.ARG_BOUNDS","text":"ARG_BOUNDS\n\nDescription\n\nCommon docstring: the y-lim bounds for a plot.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_CLASS_LABELS","page":"Dev Index","title":"DCCR.ARG_CLASS_LABELS","text":"ARGCLASSLABELS\n\nDescription\n\nCommon docstring, argument for the class labels as strings used for plot axes.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_DATA_MATRIX","page":"Dev Index","title":"DCCR.ARG_DATA_MATRIX","text":"ARGDATAMATRIX\n\nDescription\n\nCommon docstring, argument for a set of features as a 2-D matrix.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_DATA_SPLIT","page":"Dev Index","title":"DCCR.ARG_DATA_SPLIT","text":"ARGDATASPLIT\n\nDescription\n\nCommon docstring, argument for the DataSplit used for training, plotting, etc.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_PERCENTAGES","page":"Dev Index","title":"DCCR.ARG_PERCENTAGES","text":"ARG_PERCENTAGES\n\nDescription\n\nCommon docstring: argument flag to use a custom percentage formatter during plotting.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_Y","page":"Dev Index","title":"DCCR.ARG_Y","text":"ARG_Y\n\nDescription\n\nCommon docstring: argument for the true target values.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_Y_HAT","page":"Dev Index","title":"DCCR.ARG_Y_HAT","text":"ARGYHAT\n\nDescription\n\nCommon docstring: argument for the classifier's target outputs.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_Y_HAT_TRAIN","page":"Dev Index","title":"DCCR.ARG_Y_HAT_TRAIN","text":"ARGYHAT_TRAIN\n\nDescription\n\nCommon docstring: argument for the target estimates on the training data.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ARG_Y_HAT_VAL","page":"Dev Index","title":"DCCR.ARG_Y_HAT_VAL","text":"ARGYHAT_VAL\n\nDescription\n\nCommon docstring: argument for classifier validation data estimates.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.BLOCK_TYPES","page":"Dev Index","title":"DCCR.BLOCK_TYPES","text":"BLOCK_TYPES\n\nDescription\n\nThe names of the blocks that are encountered during L2 experiments.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.DOC_ARG_SAVE_DIR","page":"Dev Index","title":"DCCR.DOC_ARG_SAVE_DIR","text":"DOCARGSAVE_DIR\n\nDescription\n\nCommon docstring: argument for the directory string to save to.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.JSON_INDENT","page":"Dev Index","title":"DCCR.JSON_INDENT","text":"JSON_INDENT\n\nDescription\n\nConstant for pretty indentation spacing in JSON files.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.LOG_STATES","page":"Dev Index","title":"DCCR.LOG_STATES","text":"LOG_STATES\n\nDescription\n\nThe enumerated states that an L2 logger log can be in.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.SAVE_MAP","page":"Dev Index","title":"DCCR.SAVE_MAP","text":"SAVE_MAP\n\nDescription\n\nDictionary mapping the names of result save types to the private wrapper functions that implement them.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.n_colors","page":"Dev Index","title":"DCCR.n_colors","text":"Inferred number of colors used from the color palettes.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.pubu_9","page":"Dev Index","title":"DCCR.pubu_9","text":"Purple-blue-9 ColorScheme, inferred from the RGB values\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.pubu_9_raw","page":"Dev Index","title":"DCCR.pubu_9_raw","text":"Purple-blue-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ylgn_9","page":"Dev Index","title":"DCCR.ylgn_9","text":"Yellow-green-9 ColorScheme, inferred from the RGB values.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.ylgn_9_raw","page":"Dev Index","title":"DCCR.ylgn_9_raw","text":"Yellow-green-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DCCR.Agent","page":"Dev Index","title":"DCCR.Agent","text":"abstract type Agent\n\nSummary\n\nL2 agent supertype.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.DDVFAAgent","page":"Dev Index","title":"DCCR.DDVFAAgent","text":"struct DDVFAAgent <: DCCR.Agent\n\nSummary\n\nDDVFA-based L2 Agent.\n\nFields\n\nagent::AdaptiveResonance.DDVFA: The DDVFA module.\n\nparams::Dict: Parameters used for l2logging.\n\nscenario::DCCR.ExperienceQueueContainer: Container for the Experience Queue.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.DDVFAAgent-Tuple{AdaptiveResonance.opts_DDVFA, AbstractDict}","page":"Dev Index","title":"DCCR.DDVFAAgent","text":"DDVFAAgent(\n    ddvfa_opts::AdaptiveResonance.opts_DDVFA,\n    scenario_dict::AbstractDict\n) -> DCCR.DDVFAAgent\n\n\nSummary\n\nConstructor for a DDVFAAgent using the scenario dictionary and optional DDVFA keyword argument options.\n\nArguments\n\nopts::AbstractDict: keyword arguments for DDVFA options.\nscenario::AbstractDict: l2logger scenario as a dictionary.\n\nMethod List / Definition Locations\n\nDDVFAAgent(ddvfa_opts, scenario_dict)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:78.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.DDVFAAgent-Tuple{AdaptiveResonance.opts_DDVFA}","page":"Dev Index","title":"DCCR.DDVFAAgent","text":"DDVFAAgent(\n    ddvfa_opts::AdaptiveResonance.opts_DDVFA\n) -> DCCR.DDVFAAgent\n\n\nSummary\n\nCreates a DDVFA agent with an empty experience queue.\n\nArguments\n\nddvfa_opts::opts_DDVFA: the options struct used to initialize the DDVFA module and set the logging params.\n\nMethod List / Definition Locations\n\nDDVFAAgent(ddvfa_opts)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:51.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.Data","page":"Dev Index","title":"DCCR.Data","text":"abstract type Data\n\nSummary\n\nAbstract supertype for all Data structs in this library.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.DataSplit","page":"Dev Index","title":"DCCR.DataSplit","text":"struct DataSplit <: DCCR.MatrixData\n\nSummary\n\nA basic struct for encapsulating the components of supervised training.\n\nFields\n\ntrain::DCCR.LabeledDataset: Training LabeledDataset.\n\nval::DCCR.LabeledDataset: Validation LabeledDataset.\n\ntest::DCCR.LabeledDataset: Test LabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.DataSplitCombined","page":"Dev Index","title":"DCCR.DataSplitCombined","text":"struct DataSplitCombined <: DCCR.MatrixData\n\nSummary\n\nA struct for combining training and validation data, containing only train and test splits.\n\nFields\n\ntrain::DCCR.LabeledDataset: Training LabeledDataset.\n\ntest::DCCR.LabeledDataset: Testing LabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.DataSplitCombined-Tuple{DCCR.DataSplit}","page":"Dev Index","title":"DCCR.DataSplitCombined","text":"DataSplitCombined(\n    data::DCCR.DataSplit\n) -> DCCR.DataSplitCombined\n\n\nSummary\n\nConstructs a DataSplitCombined from an existing DataSplit by consolidating the training and validation data.\n\nArguments\n\ndata::DataSplit: the DataSplit struct for consolidating validation Features and Labels into the training data.\n\nMethod List / Definition Locations\n\nDataSplitCombined(data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/data.jl:171.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.DataSplitIndexed","page":"Dev Index","title":"DCCR.DataSplitIndexed","text":"struct DataSplitIndexed <: DCCR.VectoredData\n\nSummary\n\nA struct for encapsulating the components of supervised training in vectorized form.\n\nFields\n\ntrain::DCCR.VectorLabeledDataset: Training VectorLabeledDataset.\n\nval::DCCR.VectorLabeledDataset: Validation VectorLabeledDataset.\n\ntest::DCCR.VectorLabeledDataset: Test VectorLabeledDataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.Experience","page":"Dev Index","title":"DCCR.Experience","text":"struct Experience\n\nSummary\n\nExperience block for an agent.\n\nTaken from l2logger_template.\n\nFields\n\ntask_name::String: The task name.\n\nseq_nums::DCCR.SequenceNums: The sequence numbers (block and experience count).\n\nblock_type::String: The block type, valid values are ∈ [\"train\", \"test\"].\n\nupdate_model::Bool: Flag for updating the model (i.e., true is to train, false is to classify).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.Experience-Tuple{AbstractString, DCCR.SequenceNums, AbstractString}","page":"Dev Index","title":"DCCR.Experience","text":"Experience(\n    task_name::AbstractString,\n    seq_nums::DCCR.SequenceNums,\n    block_type::AbstractString\n) -> DCCR.Experience\n\n\nSummary\n\nConstructs an Experience, setting the update_model field based upon the block type.\n\nArguments\n\ntask_name::AbstractString: the name of the current task.\nseq_nums::SequenceNums: the block and experience number of the Experience.\nblock_type::AbstractString: the block type ∈ [\"train\", \"test\"]. Using \"train\" sets update_model to true, \"test\" to false.\n\nMethod List / Definition Locations\n\nExperience(task_name, seq_nums, block_type)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/experience.jl:76.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.ExperienceQueue","page":"Dev Index","title":"DCCR.ExperienceQueue","text":"ExperienceQueue\n\nDescription\n\nAlias for a queue of Experiences.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.ExperienceQueueContainer","page":"Dev Index","title":"DCCR.ExperienceQueueContainer","text":"struct ExperienceQueueContainer\n\nSummary\n\nContainer for the ExperienceQueue and some statistics about it.\n\nFields\n\nqueue::DataStructures.Deque{DCCR.Experience}: The ExperienceQueue itself.\n\nstats::Dict{String, Any}: The statistics about the queue. NOTE These statistics reflect the queue at construction, not after any processing.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.ExperienceQueueContainer-Tuple{AbstractDict}","page":"Dev Index","title":"DCCR.ExperienceQueueContainer","text":"ExperienceQueueContainer(\n    scenario_dict::AbstractDict\n) -> DCCR.ExperienceQueueContainer\n\n\nSummary\n\nCreates a queue of Experiences from the scenario dictionary.\n\nArguments\n\nscenario_dict::AbstractDict: the scenario dictionary.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer(scenario_dict)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:135.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.ExperienceQueueContainer-Tuple{}","page":"Dev Index","title":"DCCR.ExperienceQueueContainer","text":"ExperienceQueueContainer() -> DCCR.ExperienceQueueContainer\n\n\nSummary\n\nCreates an empty ExperienceQueueContainer with an empty queue and zeroed stats.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer()\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:110.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.Features","page":"Dev Index","title":"DCCR.Features","text":"Features\n\nDescription\n\nDefinition of features as a matrix of floating-point numbers of dimension (featuredim, nsamples).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.LabeledDataset","page":"Dev Index","title":"DCCR.LabeledDataset","text":"struct LabeledDataset\n\nSummary\n\nA single dataset of Features, Targets, and human-readable string Labels.\n\nFields\n\nx::Matrix{Float64}: Collection of Features in the labeled dataset.\n\ny::Vector{Int64}: Targets corresponding to the Features.\n\nlabels::Vector{String}: Human-readable Labels corresponding to the Targets values.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.LabeledDataset-Tuple{DCCR.LabeledDataset, DCCR.LabeledDataset}","page":"Dev Index","title":"DCCR.LabeledDataset","text":"LabeledDataset(\n    d1::DCCR.LabeledDataset,\n    d2::DCCR.LabeledDataset\n) -> DCCR.LabeledDataset\n\n\nSummary\n\nA constructor for a LabeledDataset that merges two other LabeledDatasets.\n\nArguments\n\nd1::LabeledDataset: the first LabeledDataset to consolidate.\nd2::LabeledDataset: the second LabeledDataset to consolidate.\n\nMethod List / Definition Locations\n\nLabeledDataset(d1, d2)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/data.jl:156.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.Labels","page":"Dev Index","title":"DCCR.Labels","text":"Labels\n\nDescription\n\nDefinition of labels as a vector of strings.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.MatrixData","page":"Dev Index","title":"DCCR.MatrixData","text":"abstract type MatrixData <: DCCR.Data\n\nSummary\n\nAbstract type for Data structs that represent features as matrices.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.ParsedArgs","page":"Dev Index","title":"DCCR.ParsedArgs","text":"ParsedArgs\n\nDescription\n\nType alias for how parsed arguments are treated.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.SequenceNums","page":"Dev Index","title":"DCCR.SequenceNums","text":"struct SequenceNums\n\nSummary\n\nSequence numbers for a block and Experience.\n\nTaken from l2logger_template.\n\nFields\n\nblock_num::Int64: The block number.\n\nexp_num::Int64: The experience number.\n\ntask_num::Int64: The task-specific count.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.StatsDict","page":"Dev Index","title":"DCCR.StatsDict","text":"StatsDict\n\nDescription\n\nAlias for a statistics dictionary being string keys mapping to any object.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.Targets","page":"Dev Index","title":"DCCR.Targets","text":"Targets\n\nDescription\n\nDefinition of targets as a vector of integers.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.VectorLabeledDataset","page":"Dev Index","title":"DCCR.VectorLabeledDataset","text":"struct VectorLabeledDataset\n\nSummary\n\nA single dataset of vectored labeled data with Features, Targets, and human-readable string Labels.\n\nFields\n\nx::Vector{Matrix{Float64}}: A vector of Features matrices.\n\ny::Vector{Vector{Int64}}: A vector of Targets corresponding to the Features.\n\nlabels::Vector{String}: String Labels corresponding to the Targets.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DCCR.VectoredData","page":"Dev Index","title":"DCCR.VectoredData","text":"abstract type VectoredData <: DCCR.Data\n\nSummary\n\nAbstract type for Data structs that represent features as vectors of matrices.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#Base.show-Tuple{IO, DCCR.DDVFAAgent}","page":"Dev Index","title":"Base.show","text":"show(io::IO, agent::DCCR.DDVFAAgent)\n\n\nSummary\n\nOverload of the show function for DDVFAAgent.\n\nArguments\n\nio::IO: the current IO stream.\ncont::DDVFAAgent: the DDVFAAgent to print/display.\n\nMethod List / Definition Locations\n\nshow(io, agent)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:98.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DCCR.ExperienceQueueContainer}","page":"Dev Index","title":"Base.show","text":"show(io::IO, cont::DCCR.ExperienceQueueContainer)\n\n\nSummary\n\nOverload of the show function for ExperienceQueueContainer.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, cont)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:175.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DataStructures.Deque{DCCR.Experience}}","page":"Dev Index","title":"Base.show","text":"show(io::IO, queue::DataStructures.Deque{DCCR.Experience})\n\n\nSummary\n\nOverload of the show function for ExperienceQueue.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, queue)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:157.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR._save_dccr_fig-Tuple{Any, AbstractString}","page":"Dev Index","title":"DCCR._save_dccr_fig","text":"_save_dccr_fig(fig, dir::AbstractString) -> Any\n\n\nSummary\n\nWrapper for how figures are saved in the DCCR project.\n\nArguments\n\nfig: the figure object to save.\ndir::AbstractString: the directory to save to.\n\nMethod List / Definition Locations\n\n_save_dccr_fig(fig, dir)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:19.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR._save_dccr_table-Tuple{Any, AbstractString}","page":"Dev Index","title":"DCCR._save_dccr_table","text":"_save_dccr_table(table, dir::AbstractString) -> Any\n\n\nSummary\n\nWrapper for how tables are saved in the DCCR project.\n\nArguments\n\ntable: the table object to save.\ndir::AbstractString: the directory to save to.\n\nMethod List / Definition Locations\n\n_save_dccr_table(table, dir)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:30.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.collect_activations-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.collect_activations","text":"collect_activations(data_dir::AbstractString) -> Any\n\n\nSummary\n\nReturns the activations from a single directory.\n\nArguments\n\ndata_dir::AbstractString: the single data directory to load the features from.\n\nMethod List / Definition Locations\n\ncollect_activations(data_dir)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:31.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.collect_all_activations-Tuple{AbstractArray, Integer}","page":"Dev Index","title":"DCCR.collect_all_activations","text":"collect_all_activations(\n    data_dirs::AbstractArray,\n    cell::Integer\n) -> Any\n\n\nSummary\n\nReturn just the yolo activations from a list of data directories.\n\nArguments\n\ndata_dirs::AbstractArray: the data directories to load the yolo activations from.\ncell::Integer: the number of cells corresponding to the windowing procedure.\n\nMethod List / Definition Locations\n\ncollect_all_activations(data_dirs, cell)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:43.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.collect_all_activations_labeled-Tuple{Vector{String}, Integer}","page":"Dev Index","title":"DCCR.collect_all_activations_labeled","text":"collect_all_activations_labeled(\n    data_dirs::Vector{String},\n    cell::Integer\n) -> Tuple{Any, Vector{Int64}, Vector{String}}\n\n\nSummary\n\nReturn the yolo activations, training targets, and condensed labels list from a list of data directories.\n\nArguments\n\ndata_dirs::Vector{String}: the directories to load the data from.\ncell::Integer: the number of cells to use in the windowed averaging procedure.\n\nMethod List / Definition Locations\n\ncollect_all_activations_labeled(data_dirs, cell)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:64.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_accuracy_groupedbar-Tuple{DCCR.DataSplit, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Vector{String}}","page":"Dev Index","title":"DCCR.create_accuracy_groupedbar","text":"create_accuracy_groupedbar(\n    data::DCCR.DataSplit,\n    y_hat_train::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    class_labels::Vector{String};\n    percentages\n) -> Plots.Plot\n\n\nSummary\n\nReturn a grouped bar chart with class accuracies.\n\nArguments\n\ndata::DataSplit: the original dataset with a train, val, and test split.\ny_hat_train::IntegerVector: the classifier estimates from the training data.\ny_hat::IntegerVector: the approximated targets generated by the classifier.\nclass_labels::Vector{String}: the string labels to use for the plot axes.\npercentages::Bool=false: optional, flag to use the custom percentage formatter or not.\n\nMethod List / Definition Locations\n\ncreate_accuracy_groupedbar(\n    data,\n    y_hat_train,\n    y_hat,\n    class_labels;\n    percentages\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:738.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_boxplot-Tuple{AbstractMatrix{T} where T<:Real, Vector{String}}","page":"Dev Index","title":"DCCR.create_boxplot","text":"create_boxplot(\n    data::AbstractMatrix{T} where T<:Real,\n    class_labels::Vector{String};\n    percentages,\n    bounds,\n    violin_bandwidth\n) -> Any\n\n\nSummary\n\nReturn a colored and formatted boxplot of the data.\n\nArguments\n\ndata::RealMatrix: the data as a 2-D matrix of real values.\nclass_labels::Vector{String}: the string labels to use for the plot axes.\npercentages::Bool=false: optional, flag to use the custom percentage formatter or not.\nbounds::Tuple{Float, Float}=(0.45, 1.0): optional, the bounds for the y-lim bounds of the plot.\nviolin_bandwidth::Real=0.01: the bandwidth parameter passed to the violin plot.\n\nMethod List / Definition Locations\n\ncreate_boxplot(\n    data,\n    class_labels;\n    percentages,\n    bounds,\n    violin_bandwidth\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:868.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_comparison_groupedbar-Tuple{DCCR.DataSplit, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Vector{String}}","page":"Dev Index","title":"DCCR.create_comparison_groupedbar","text":"create_comparison_groupedbar(\n    data::DCCR.DataSplit,\n    y_hat_val::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    class_labels::Vector{String};\n    percentages,\n    extended\n) -> Plots.Plot\n\n\nSummary\n\nReturn a grouped bar chart with comparison bars.\n\nArguments\n\ndata::DataSplit: the original dataset with a train, val, and test split.\ny_hat_val::IntegerVector: the classifier estimates from the validation data.\ny_hat::IntegerVector: the approximated targets generated by the classifier.\nclass_labels::Vector{String}: the string labels to use for the plot axes.\npercentages::Bool=false: optional, flag to use the custom percentage formatter or not.\nextended::Bool=false: if the plot needs to be extended to another category, compensating for misclassification.\n``\n\nMethod List / Definition Locations\n\ncreate_comparison_groupedbar(\n    data,\n    y_hat_val,\n    y_hat,\n    class_labels;\n    percentages,\n    extended\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:795.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_complex_condensed_plot","page":"Dev Index","title":"DCCR.create_complex_condensed_plot","text":"create_complex_condensed_plot(\n    perfs,\n    vals,\n    class_labels\n) -> Tuple{Plots.Plot, Any}\ncreate_complex_condensed_plot(\n    perfs,\n    vals,\n    class_labels,\n    percentages::Bool\n) -> Tuple{Plots.Plot, Any}\n\n\nSummary\n\nCreate and return a complex condensed scenario plot.\n\nMethod List / Definition Locations\n\ncreate_complex_condensed_plot(perfs, vals, class_labels)\ncreate_complex_condensed_plot(\n    perfs,\n    vals,\n    class_labels,\n    percentages\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1046.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.create_complex_condensed_plot_alt","page":"Dev Index","title":"DCCR.create_complex_condensed_plot_alt","text":"create_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels\n) -> Tuple{Plots.Plot, Vector{Any}, Vector{Any}}\ncreate_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels,\n    percentages::Bool\n) -> Tuple{Plots.Plot, Vector{Any}, Vector{Any}}\n\n\nSummary\n\nCreate and return an alternate complex condensed scenario plot.\n\nMethod List / Definition Locations\n\ncreate_complex_condensed_plot_alt(perfs, vals, class_labels)\ncreate_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels,\n    percentages\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1118.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.create_condensed_plot","page":"Dev Index","title":"DCCR.create_condensed_plot","text":"create_condensed_plot(perfs, class_labels) -> Plots.Plot\ncreate_condensed_plot(\n    perfs,\n    class_labels,\n    percentages::Bool\n) -> Plots.Plot\n\n\nSummary\n\nCreate and return a simplified condensed scenario plot.\n\nMethod List / Definition Locations\n\ncreate_condensed_plot(perfs, class_labels)\ncreate_condensed_plot(perfs, class_labels, percentages)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1005.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.create_confusion_heatmap-Tuple{Vector{String}, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"DCCR.create_confusion_heatmap","text":"create_confusion_heatmap(\n    class_labels::Vector{String},\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer\n) -> Plots.Plot\n\n\nSummary\n\nReturns a handle to a labeled and annotated heatmap plot of the confusion matrix.\n\nArguments\n\nclass_labels::Vector{String}: the string labels to use for the plot axes.\ny::IntegerVector: the true targets as integers.\ny_hat::IntegerVector: the approximated targets generated by the classifier.\n\nMethod List / Definition Locations\n\ncreate_confusion_heatmap(class_labels, y, y_hat)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:580.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_custom_confusion_heatmap-Tuple{Vector{String}, AbstractMatrix{T} where T<:Real}","page":"Dev Index","title":"DCCR.create_custom_confusion_heatmap","text":"create_custom_confusion_heatmap(\n    class_labels::Vector{String},\n    norm_cm::AbstractMatrix{T} where T<:Real\n) -> Plots.Plot\n\n\nSummary\n\nReturns a handle to a labeled and annotated heatmap plot of the confusion matrix.\n\nArguments\n\nclass_labels::Vector{String}: the string labels to use for the plot axes.\nnorm_cm::RealMatrix: the normalized confuction matrix to plot as a heatmap.\n\nMethod List / Definition Locations\n\ncreate_custom_confusion_heatmap(class_labels, norm_cm)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:658.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.create_inverted_boxplot-Tuple{AbstractMatrix{T} where T<:Real, Vector{String}}","page":"Dev Index","title":"DCCR.create_inverted_boxplot","text":"create_inverted_boxplot(\n    data::AbstractMatrix{T} where T<:Real,\n    class_labels::Vector{String};\n    percentages,\n    bounds\n) -> Any\n\n\nSummary\n\nReturn a colored and formatted boxplot of the data.\n\nArguments\n\ndata::RealMatrix: the data as a 2-D matrix of real values.\nclass_labels::Vector{String}: the string labels to use for the plot axes.\npercentages::Bool=false: optional, flag to use the custom percentage formatter or not.\nbounds::Tuple{Float, Float}=(0.45, 1.0): optional, the bounds for the y-lim bounds of the plot.\n\nMethod List / Definition Locations\n\ncreate_inverted_boxplot(\n    data,\n    class_labels;\n    percentages,\n    bounds\n)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:937.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.df_column_to_matrix-Tuple{DataFrames.DataFrame, Symbol}","page":"Dev Index","title":"DCCR.df_column_to_matrix","text":"df_column_to_matrix(\n    df::DataFrames.DataFrame,\n    row::Symbol\n) -> Any\n\n\nSummary\n\nConvert a column of lists in a DataFrame into a matrix for analysis.\n\nArguments\n\ndf::DataFrame: the DataFrame containing the column of lists.\nrow::Symbol: the symbolic name of the row in the DataFrame to convert into a matrix.\n\nMethod List / Definition Locations\n\ndf_column_to_matrix(df, row)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:494.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.dist_exp_parse","page":"Dev Index","title":"DCCR.dist_exp_parse","text":"dist_exp_parse() -> Any\ndist_exp_parse(description::AbstractString) -> Any\n\n\nSummary\n\nParses the command line for common options in distributed experiments.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\ndist_exp_parse()\ndist_exp_parse(description)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:141.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.evaluate_agent!-Tuple{DCCR.Agent, DCCR.Experience, DCCR.VectoredData}","page":"Dev Index","title":"DCCR.evaluate_agent!","text":"evaluate_agent!(\n    agent::DCCR.Agent,\n    experience::DCCR.Experience,\n    data::DCCR.VectoredData\n) -> Dict\n\n\nSummary\n\nEvaluates a single agent on a single experience, training or testing as needed.\n\nArguments\n\nagent::Agent: the Agent to evaluate.\nexp::Experience: the Experience to use for training/testing.\n\nMethod List / Definition Locations\n\nevaluate_agent!(agent, experience, data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:149.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.exp_parse","page":"Dev Index","title":"DCCR.exp_parse","text":"exp_parse() -> Any\nexp_parse(description::AbstractString) -> Any\n\n\nSummary\n\nParses the command line for common options in serial (non-distributed) experiments.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\nexp_parse()\nexp_parse(description)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:115.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.feature_preprocess-Tuple{StatsBase.ZScoreTransform, Real, AbstractMatrix{T} where T<:Real}","page":"Dev Index","title":"DCCR.feature_preprocess","text":"feature_preprocess(\n    dt::StatsBase.ZScoreTransform,\n    scaling::Real,\n    data::AbstractMatrix{T} where T<:Real\n) -> Any\n\n\nSummary\n\nPreprocesses one dataset of features, scaling and squashing along the feature axes.\n\nArguments\n\ndt::ZScoreTransform: the Gaussian statistics of the features.\nscaling::Real: the sigmoid scaling parameter.\ndata::RealMatrix: the 2-D matrix of features to transform.\n\nMethod List / Definition Locations\n\nfeature_preprocess(dt, scaling, data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:120.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.fields_to_dict!-Tuple{AbstractDict, Any}","page":"Dev Index","title":"DCCR.fields_to_dict!","text":"fields_to_dict!(dict::AbstractDict, opts)\n\n\nSummary\n\nAdds entry to a dictionary from a struct with fields.\n\nMeant to be used with StatsDict.\n\nArguments\n\ndict::AbstractDict: the StatsDict dictionary to add entries to.\nopts::Any: a struct containing fields, presumably of options, to add as key-value entries to the dict.\n\nMethod List / Definition Locations\n\nfields_to_dict!(dict, opts)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:205.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_accuracies-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DCCR.get_accuracies","text":"get_accuracies(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Any\n\n\nSummary\n\nGet a list of the percentage accuracies.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_accuracies(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:413.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_argparsesettings","page":"Dev Index","title":"DCCR.get_argparsesettings","text":"get_argparsesettings() -> Any\nget_argparsesettings(description::AbstractString) -> Any\n\n\nSummary\n\nCommon function for how ArgParseSettings are generated in the project.\n\nArguments\n\ndescription::AbstractString: optional positional, the script description for the parser\n\nMethod List / Definition Locations\n\nget_argparsesettings()\nget_argparsesettings(description)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:99.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.get_confusion-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DCCR.get_confusion","text":"get_confusion(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Matrix{Int64}\n\n\nSummary\n\nWrapper method for getting the raw confusion matrix.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_confusion(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:385.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_deindexed_data-Tuple{DCCR.DataSplitIndexed, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"DCCR.get_deindexed_data","text":"get_deindexed_data(\n    data::DCCR.DataSplitIndexed,\n    order::AbstractVector{T} where T<:Integer\n) -> DCCR.DataSplit\n\n\nSummary\n\nTurn a DataSplitIndexed into a DataSplit with the given train/test order.\n\nArguments\n\ndata::DataSplitIndexed: the indexed data to consolidate back into a DataSplit.\norder::IntegerVector: the order used by the indexed data for correctly deindexing.\n\nMethod List / Definition Locations\n\nget_deindexed_data(data, order)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:284.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_dist-Tuple{AbstractMatrix{T} where T<:Real}","page":"Dev Index","title":"DCCR.get_dist","text":"get_dist(\n    data::AbstractMatrix{T} where T<:Real\n) -> StatsBase.ZScoreTransform\n\n\nSummary\n\nGet the distribution parameters for preprocessing.\n\nArguments\n\ndata::RealMatrix: a 2-D matrix of features for computing the Gaussian statistics of.\n\nMethod List / Definition Locations\n\nget_dist(data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:108.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_index_from_name-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:AbstractString","page":"Dev Index","title":"DCCR.get_index_from_name","text":"get_index_from_name(\n    labels::Array{T<:AbstractString, 1},\n    name::AbstractString\n) -> Any\n\n\nSummary\n\nGets an integer index of where a string name appears in a list of strings.\n\nArguments\n\nlabels::Vector{T} where T <: AbstractString: the list of strings to search.\nname::AbstractString: the name to search for in the list of labels.\n\nMethod List / Definition Locations\n\nget_index_from_name(labels, name)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:131.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_indexed_data-Tuple{DCCR.DataSplit}","page":"Dev Index","title":"DCCR.get_indexed_data","text":"get_indexed_data(\n    data::DCCR.DataSplit\n) -> DCCR.DataSplitIndexed\n\n\nSummary\n\nCreate a DataSplitIndexed object from a DataSplit.\n\nArguments\n\ndata::DataSplit: the DataSplit to separate into vectors of matrices.\n\nMethod List / Definition Locations\n\nget_indexed_data(data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:224.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_manual_split-Tuple{AbstractMatrix{T} where T<:Real, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"DCCR.get_manual_split","text":"get_manual_split(\n    data::AbstractMatrix{T} where T<:Real,\n    targets::AbstractVector{T} where T<:Integer\n) -> Tuple{Tuple{Any, Any}, Tuple{Any, Any}}\n\n\nSummary\n\nWrapper of stratifiedobs, returns a manual train/test x/y split from a data matrix and labels using MLDataUtils.\n\nArguments\n\ndata::RealMatrix: the feature data to split into training and testing.\ntargets::IntegerVector: the labels corresponding to the data to split into training and testing.\n\nMethod List / Definition Locations\n\nget_manual_split(data, targets)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:482.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_n_categories-Tuple{AdaptiveResonance.DDVFA, Int64}","page":"Dev Index","title":"DCCR.get_n_categories","text":"get_n_categories(\n    ddvfa::AdaptiveResonance.DDVFA,\n    n_classes::Int64\n) -> Tuple{Vector{Int64}, Vector{Int64}}\n\n\nSummary\n\nReturns both the number of F2 categories and total number of weights per class as two lists.\n\nArguments\n\nddvfa::DDVFA: the DDVFA module to calculate the statistics for.\nn_classes::Int: the number of target classes that the model was trained upon.\n\nMethod List / Definition Locations\n\nget_n_categories(ddvfa, n_classes)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:455.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_normalized_confusion-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DCCR.get_normalized_confusion","text":"get_normalized_confusion(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Matrix{Float64}\n\n\nSummary\n\nGet the normalized confusion matrix.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_normalized_confusion(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:397.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_orbit_names-Tuple{Vector{String}}","page":"Dev Index","title":"DCCR.get_orbit_names","text":"get_orbit_names(\n    selection::Vector{String}\n) -> Tuple{Vector{String}, Vector{String}}\n\n\nSummary\n\nMap the experiment orbit names to their data directories and plotting class labels.\n\nArguments\n\nselection::Vector{String}: the selection of labels corresponding to both data directories and plotting labels.\n\nMethod List / Definition Locations\n\nget_orbit_names(selection)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:339.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.get_tt_accuracies-Tuple{DCCR.MatrixData, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DCCR.get_tt_accuracies","text":"get_tt_accuracies(\n    data::DCCR.MatrixData,\n    y_hat_train::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Tuple{Any, Any}\n\n\nSummary\n\nGet two lists of the training and testing accuracies.\n\nArguments\n\ndata::MatrixData: the training and testing dataset, containing a vector of training and testing labels data.train.y and data.test.y.\ny_hat_train::IntegerVector: the training estimates.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_tt_accuracies(data, y_hat_train, y_hat, n_classes)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:432.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.handle_display-Tuple{Plots.Plot, Dict{String, Any}}","page":"Dev Index","title":"DCCR.handle_display","text":"handle_display(\n    p::Plots.Plot,\n    pargs::Dict{String, Any}\n) -> Any\n\n\nSummary\n\nHandles the display of plots according to arguments parsed by the script.\n\nArguments\n\np::Plots.Plot: the plot handle to display if necessary.\npargs::ParsedArgs: the parsed arguments provided by the script.\n\nMethod List / Definition Locations\n\nhandle_display(p, pargs)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:213.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.initialize_exp_queue!-Tuple{DCCR.ExperienceQueueContainer, AbstractDict}","page":"Dev Index","title":"DCCR.initialize_exp_queue!","text":"initialize_exp_queue!(\n    eqc::DCCR.ExperienceQueueContainer,\n    scenario_dict::AbstractDict\n)\n\n\nSummary\n\nInitializes an ExperienceQueueContainer from the provided scenario dictionary.\n\nArguments\n\neqc::ExperienceQueueContainer: the container with the queue and stats to initialize.\nscenario_dict::AbstractDict: the dictionary with the scenario regimes and block types.\n\nMethod List / Definition Locations\n\ninitialize_exp_queue!(eqc, scenario_dict)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/scenario.jl:56.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.is_complete-Tuple{DCCR.Agent}","page":"Dev Index","title":"DCCR.is_complete","text":"is_complete(agent::DCCR.Agent) -> Bool\n\n\nSummary\n\nChecks if the Agent is done with its scenario queue.\n\nArguments\n\nagent::Agent: the agent to test scenario completion on.\n\nMethod List / Definition Locations\n\nis_complete(agent)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:118.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.json_load-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.json_load","text":"json_load(filepath::AbstractString) -> Any\n\n\nSummary\n\nLoads the JSON file, interpreted as a dictionary.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to load.\n\nMethod List / Definition Locations\n\njson_load(filepath)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/common.jl:93.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.json_save-Tuple{AbstractString, AbstractDict}","page":"Dev Index","title":"DCCR.json_save","text":"json_save(filepath::AbstractString, dict::AbstractDict)\n\n\nSummary\n\nSaves the dictionary to a JSON file.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to save to.\ndict::AbstractDict: the dictionary to save to the file.\n\nMethod List / Definition Locations\n\njson_save(filepath, dict)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/common.jl:80.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.load_default_orbit_data-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.load_default_orbit_data","text":"load_default_orbit_data(\n    data_dir::AbstractString;\n    scaling\n) -> Tuple{DCCR.DataSplit, DCCR.DataSplitIndexed, Vector{String}, Vector{String}, Int64}\n\n\nSummary\n\nLoads the default orbit data configuration.\n\nArguments\n\ndata_dir::AbstractString: the relative/absolute directory containing the data.\nscaling::Float: the sigmoid scaling parameter, default scaling=2.0\n\nMethod List / Definition Locations\n\nload_default_orbit_data(data_dir; scaling)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1539.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.load_opts-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.load_opts","text":"load_opts(file::AbstractString) -> Any\n\n\nSummary\n\nLoads the provided options YAML file.\n\nArguments\n\nfile::AbstractString: the YAML file to load.\n\nMethod List / Definition Locations\n\nload_opts(file)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:170.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.load_orbits-Tuple{AbstractString, Vector{String}, Real}","page":"Dev Index","title":"DCCR.load_orbits","text":"load_orbits(\n    data_dir::AbstractString,\n    data_dirs::Vector{String},\n    scaling::Real\n) -> DCCR.DataSplit\n\n\nSummary\n\nLoad the orbits data and preprocess the features.\n\nArguments\n\ndata_dir::AbstractString: the top-level data directory.\ndata_dirs::Vector{String}: the subfolders to load.\nscaling::Real: the sigmoidal scaling parameter to use.\n\nMethod List / Definition Locations\n\nload_orbits(data_dir, data_dirs, scaling)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:137.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.load_sim_opts","page":"Dev Index","title":"DCCR.load_sim_opts","text":"load_sim_opts() -> Any\nload_sim_opts(file::AbstractString) -> Any\n\n\nSummary\n\nLoads and returns the simulation options from the provided YAML file.\n\nArguments\n\nfile::AbstractString=\"default.yml\": options the file to load from the options directory.\n\nMethod List / Definition Locations\n\nload_sim_opts()\nload_sim_opts(file)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:185.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DCCR.load_sim_results-Tuple{AbstractString, Vararg{Any}}","page":"Dev Index","title":"DCCR.load_sim_results","text":"load_sim_results(data_file::AbstractString, args...) -> Any\n\n\nSummary\n\nWrapper for loading simulation results with arbitrarily many fields.\n\nArguments\n\ndata_file::AbstractString: the location of the datafile for loading.\nargs...: the string names of the files to open.\n\nMethod List / Definition Locations\n\nload_sim_results(data_file, args)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:225.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.log_data-Tuple{PyCall.PyObject, DCCR.Experience, Dict, Dict}","page":"Dev Index","title":"DCCR.log_data","text":"log_data(\n    data_logger::PyCall.PyObject,\n    experience::DCCR.Experience,\n    results::Dict,\n    params::Dict;\n    status\n) -> Any\n\n\nSummary\n\nLogs data from an L2 Experience.\n\nArguments\n\ndata_logger::PyObject: the l2logger DataLogger.\nexp::Experience: the Experience that the Agent just processed.\nresults::Dict: the results from the Agent's Experience.\nstatus::AbstractString: string expressing if the Experience was processed.\n\nMethod List / Definition Locations\n\nlog_data(data_logger, experience, results, params; status)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:187.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.pack_data-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.pack_data","text":"pack_data(experiment_name::AbstractString) -> String\n\n\nSummary\n\nPacks the data under the provided experiment name folder into an LFS-tracked tarball.\n\nArguments\n\nexperiment_name::AbstractString: the name of the file destination to pack from the unpacked_dir to the packed_dir.\n\nMethod List / Definition Locations\n\npack_data(experiment_name)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1501.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.packed_dir-Tuple","page":"Dev Index","title":"DCCR.packed_dir","text":"packed_dir(args...) -> String\n\n\nSummary\n\nThe packed data directory as a DrWatson-style path function.\n\nArguments\n\nargs...: string arguments a subsequent file or folders.\n\nMethod List / Definition Locations\n\npacked_dir(args)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1485.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.paper_results_dir-Tuple","page":"Dev Index","title":"DCCR.paper_results_dir","text":"paper_results_dir(args...) -> String\n\n\nSummary\n\nDrWatson-style paper results directory.\n\nMethod List / Definition Locations\n\npaper_results_dir(args)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:62.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.permuted-Tuple{Dict, DCCR.DataSplitIndexed, AdaptiveResonance.opts_DDVFA}","page":"Dev Index","title":"DCCR.permuted","text":"permuted(\n    d::Dict,\n    data_indexed::DCCR.DataSplitIndexed,\n    opts::AdaptiveResonance.opts_DDVFA\n) -> Dict\n\n\nSummary\n\nRuns a single Monte Carlo simulation of training/testing on shuffled samples.\n\nArguments\n\nd::Dict: a logging dictionary storing simulation parameters.\ndata::DataSplitIndexed: an indexed train/test split of features and labels.\nopts::opts_DDVFA: the options for DDVFA construction.\n\nMethod List / Definition Locations\n\npermuted(d, data_indexed, opts)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1317.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.results_dir-Tuple","page":"Dev Index","title":"DCCR.results_dir","text":"results_dir(args...) -> String\n\n\nSummary\n\nDrWatson-style local results directory.\n\nMethod List / Definition Locations\n\nresults_dir(args)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:57.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.run_scenario-Tuple{DCCR.Agent, DCCR.VectoredData, PyCall.PyObject}","page":"Dev Index","title":"DCCR.run_scenario","text":"run_scenario(\n    agent::DCCR.Agent,\n    data::DCCR.VectoredData,\n    data_logger::PyCall.PyObject\n)\n\n\nSummary\n\nRuns an agent's scenario.\n\nArguments\n\nagent::Agent: a struct that contains an Agent and scenario.\ndata_logger::PyObject: a l2logger object.\n\nMethod List / Definition Locations\n\nrun_scenario(agent, data, data_logger)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/agents.jl:211.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.safe_unpack-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.safe_unpack","text":"safe_unpack(\n    experiment_name::AbstractString\n) -> Union{Nothing, String}\n\n\nSummary\n\nIf the provided experiment unpacked directory does not exist, this unpacks it.\n\nArguments\n\nexperiment_name::AbstractString: the name of the file to unpack from the packed_dir to the unpacked_dir.\n\nMethod List / Definition Locations\n\nsafe_unpack(experiment_name)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1525.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.sanitize_block_type-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.sanitize_block_type","text":"sanitize_block_type(block_type::AbstractString)\n\n\nSummary\n\nSanitize the selected block type against the BLOCK_TYPES constant.\n\nArguments\n\nblock_type::AbstractString: the selected block type.\n\nMethod List / Definition Locations\n\nsanitize_block_type(block_type)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/common.jl:57.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.sanitize_in_list-Union{Tuple{T}, Tuple{AbstractString, T, Vector{T}}} where T","page":"Dev Index","title":"DCCR.sanitize_in_list","text":"sanitize_in_list(\n    selection_type::AbstractString,\n    selection,\n    acceptable::Array{T, 1}\n)\n\n\nSummary\n\nSanitizes a selection within a list of acceptable options.\n\nArguments\n\nselection_type::AbstractString: a string describing the option in case it is misused.\nselection::Any: a single selection from a list.\n\nMethod List / Definition Locations\n\nsanitize_in_list(selection_type, selection, acceptable)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/common.jl:42.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.sanitize_log_state-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.sanitize_log_state","text":"sanitize_log_state(log_state::AbstractString)\n\n\nSummary\n\nSanitize the selected log state against the LOG_STATES constant.\n\nArguments\n\nlog_state::AbstractString: the selected log state.\n\nMethod List / Definition Locations\n\nsanitize_log_state(log_state)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/l2/common.jl:68.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.save_dccr-Tuple{AbstractString, Any, AbstractString, AbstractString}","page":"Dev Index","title":"DCCR.save_dccr","text":"save_dccr(\n    type::AbstractString,\n    object,\n    exp_name::AbstractString,\n    save_name::AbstractString;\n    to_paper\n) -> Any\n\n\nSummary\n\nSaving function for results in the DCCR project.\n\nThis function dispatches to the correct private wrapper saving function via the type option, and the to_paper flag determines if the result is also saved to a secondary location, which is mainly used for also saving the result to the cloud location for the journal paper.\n\nArguments\n\ntype::AbstractString: the type of object being saved (see SAVE_MAP).\nobject: the object to save as type, whether a figure, table, or something else.\nexp_name::AbstractString: the name of the experiment, used for the final saving directories.\nsave_name::AbstractString: the name of the save file itself.\nto_paper::Bool=false: optional, flag for saving to the paper results directory (default false).\n\nMethod List / Definition Locations\n\nsave_dccr(type, object, exp_name, save_name; to_paper)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/utils.jl:77.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.shuffle_orbits-Tuple{DCCR.DataSplit}","page":"Dev Index","title":"DCCR.shuffle_orbits","text":"shuffle_orbits(data::DCCR.DataSplit) -> DCCR.DataSplit\n\n\nSummary\n\nShuffles the training orbits data.\n\nArguments\n\ndata::DataSplit: the DataSplit orbits data coming from load_orbits.\n\nMethod List / Definition Locations\n\nshuffle_orbits(data)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:197.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.shuffled_mc-Tuple{Dict, DCCR.DataSplit, AdaptiveResonance.opts_DDVFA}","page":"Dev Index","title":"DCCR.shuffled_mc","text":"shuffled_mc(\n    d::Dict,\n    data::DCCR.DataSplit,\n    opts::AdaptiveResonance.opts_DDVFA\n)\n\n\nSummary\n\nRuns a single Monte Carlo simulation of training/testing on shuffled samples.\n\nArguments\n\nd::Dict: a logging dictionary storing simulation parameters.\ndata::DataSplit: a train/test split of features and labels.\nopts::opts_DDVFA: the options for DDVFA construction.\n\nMethod List / Definition Locations\n\nshuffled_mc(d, data, opts)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1252.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.sigmoid-Tuple{Real}","page":"Dev Index","title":"DCCR.sigmoid","text":"sigmoid(x::Real) -> Any\n\n\nSummary\n\nReturns the sigmoid function on x.\n\nArguments\n\nx::Real: the float or int to compute the sigmoid function upon.\n\nMethod List / Definition Locations\n\nsigmoid(x)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:21.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.unpack_data-Tuple{AbstractString}","page":"Dev Index","title":"DCCR.unpack_data","text":"unpack_data(experiment_name::AbstractString) -> String\n\n\nSummary\n\nUnpacks data at the provided experiment name tarball into a working directory.\n\nArguments\n\nexperiment_name::AbstractString: the name of the file to unpack from the packed_dir to the unpacked_dir.\n\nMethod List / Definition Locations\n\nunpack_data(experiment_name)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1513.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.unpacked_dir-Tuple","page":"Dev Index","title":"DCCR.unpacked_dir","text":"unpacked_dir(args...) -> String\n\n\nSummary\n\nThe unpacked data directory as a DrWatson-style path function.\n\nArguments\n\nargs...: string arguments a subsequent file or folders.\n\nMethod List / Definition Locations\n\nunpacked_dir(args)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1493.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DCCR.unsupervised_mc-Tuple{Dict, DCCR.DataSplitCombined, AdaptiveResonance.opts_DDVFA}","page":"Dev Index","title":"DCCR.unsupervised_mc","text":"unsupervised_mc(\n    d::Dict,\n    data::DCCR.DataSplitCombined,\n    opts::AdaptiveResonance.opts_DDVFA\n) -> Dict\n\n\nSummary\n\nRuns a single Monte Carlo simulation of supervised training and unsupervised training/testing.\n\nArguments\n\nd::Dict: a logging dictionary storing simulation parameters.\ndata::DataSplitCombined: a train/test split of features and labels.\nopts::opts_DDVFA: the options for DDVFA construction.\n\nMethod List / Definition Locations\n\nunsupervised_mc(d, data, opts)\n\ndefined at /home/runner/work/DCCR/DCCR/src/lib/c3/functions.jl:1381.\n\n\n\n\n\n","category":"method"},{"location":"man/full-index/#main-index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This page lists the core methods and types of the Julia component of the DCCR project.","category":"page"},{"location":"man/full-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section enumerates the names exported by the package, each of which links to its corresponding Documentation.","category":"page"},{"location":"man/full-index/#index-modules","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DCCR]\nOrder = [:module]","category":"page"},{"location":"man/full-index/#index-methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DCCR]\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DCCR]\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DCCR]\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#index-docs","page":"Index","title":"Docs","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section lists the documentation for every exported name of the DCCR package.","category":"page"},{"location":"man/full-index/#index-modules-docs","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DCCR]\nPrivate = false\nOrder = [:module]","category":"page"},{"location":"man/full-index/#DCCR.DCCR","page":"Index","title":"DCCR.DCCR","text":"A module encapsulating the experiment driver code for the DCCR project.\n\nImports\n\nThe following names are imported by the package as dependencies:\n\nAdaptiveResonance\nArgParse\nBase\nColorSchemes\nCore\nDataFrames\nDataStructures\nDates\nDelimitedFiles\nDocStringExtensions\nDrWatson\nJLD2\nJSON\nLogging\nMLBase\nMLDataUtils\nNumericalTypeAliases\nPkg\nPlots\nPrintf\nProgressMeter\nPyCall\nRandom\nReexport\nStatsPlots\n\nExports\n\nThe following names are exported and available when using the package:\n\nDCCR_VERSION\n\n\n\n\n\n","category":"module"},{"location":"man/full-index/#index-functions-docs","page":"Index","title":"Functions","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DCCR]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types-docs","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DCCR]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants-docs","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DCCR]\nPrivate = false\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#DCCR.DCCR_VERSION","page":"Index","title":"DCCR.DCCR_VERSION","text":"A constant that contains the version of the installed DCCR package.\n\nThis value is computed at compile time, so it may be used to programmatically verify the version of OAR that is installed in case a compat entry in your Project.toml is missing or otherwise incorrect.\n\n\n\n\n\n","category":"constant"},{"location":"examples/tutorials/julia/#julia","page":"Julia Tutorial","title":"Julia Tutorial","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"(Image: Source code) (Image: notebook) (Image: compat) (Image: Author) (Image: Update time)","category":"page"},{"location":"examples/tutorials/julia/#Overview","page":"Julia Tutorial","title":"Overview","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This demo shows how to interact with Julia to get started with DCCR experiments.","category":"page"},{"location":"examples/tutorials/julia/#Setup","page":"Julia Tutorial","title":"Setup","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"Just as in most languages, dependencies are usually loaded first in Julia scripts. These dependences are included through either using or import statements:","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"# `using` brings all of the names that are exported by the package into this context\nusing Dates\n\n# `import` simply brings the name itself without exports, so to use sub components\nimport Downloads","category":"page"},{"location":"examples/tutorials/julia/#Running-Julia-Code","page":"Julia Tutorial","title":"Running Julia Code","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"To run Julia code, open the REPL in a command terminal with julia:","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"TODO","category":"page"},{"location":"examples/tutorials/julia/#Additional-Reading","page":"Julia Tutorial","title":"Additional Reading","text":"","category":"section"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This example reveals just the tip of the iceberg of how to write and run Julia code. To learn more about the Julia programming language, see the extensive Official Julia Documentation. The Manual contains all information necessary to understand the syntax and workings of the language itself. The Base documentation lists the essential native types and utilities embedded in the language. The Standard Library is a collection of additional packages that are so useful that they are always available in Julia without additional installation.","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"","category":"page"},{"location":"examples/tutorials/julia/","page":"Julia Tutorial","title":"Julia Tutorial","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section contains some examples using the DCCR package with topics ranging from how to the internals of package work to practical examples on different datasets.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples are separated into the following sections:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Tutorials: basic Julia examples that also include how low-level routines work in this package.\nExperiments: how to run experiments in the package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#Tutorials","page":"Examples","title":"Tutorials","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples demonstrate some low-level usage of the Julia programming language and subroutines of the DCCR project itself.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"grid-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"card grid-card\">\n<div class=\"grid-card-cover\">\n<div class=\"grid-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This demo provides a quick example of how to run a Julia script.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n<div class=\"grid-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Julia Tutorial","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#examples-attribution","page":"Examples","title":"Attribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Icons used for the covers of these demo cards are attributed to the following sites:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Official Julia logo graphics","category":"page"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To work with the DCCR project, you should know:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"How to install the project\nAn overview of the project\nHow to run experiments","category":"page"},{"location":"man/guide/#guide-installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Because it is an experimental research repository, the DCCR package is not registered on JuliaHub. To set Julia component the project up, you must:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Download a Julia distribution and install it on your system\nGit clone this repository or download a zip.\nRun julia within the top of the DCCR directory, and run the following commands to instantiate the package:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"julia> ]\n(@v1.9) pkg> activate .\n(DCCR) pkg> instantiate","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This will download all of the dependencies of the project and precompile where possible.","category":"page"},{"location":"man/guide/#guide-overview","page":"Guide","title":"Overview","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The DCCR project is mainly a Julia programming language research project, so it is not designed as a package for use and installation through JuliaHub as other packages are. However, the main driver libraries of the project are bundled into a DCCR module, so this module is loaded in the preamble of all experiments as a concise way of loading common code.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The project utilizes DrWatson for workflow utilities such as directory operations, results saving/loading, and simulation configurations. The file structure of this project differs slightly from the DrWatson default setup, so extra utilities are used for pointing to the correct source data directory and destination results directory according to each experiment.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"In addition to the Julia components, some experiments are written in Python, particularly those that utilize the avalanche library for continual learning experiments. Some of these even utilize PyCall to run Julia code from Python and vice versa.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Each experiment contains a README outlining the setup and usage of the experiment such as in the setup of custom PyCall Python environments and in the running of parallel and distibuted experiments.","category":"page"},{"location":"man/guide/#guide-experiments","page":"Guide","title":"Experiments","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To run an experiment, setup the DCCR project on your target system and run the experiment either in an interactive session with include(...):","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"include(\"src/experiments/1_accuracy/1_unshuffled.jl\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"or from a terminal command line (from the top of the project directory):","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"julia --project=. src/experiments/1_accuracy/1_unshuffled.jl","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nThis project is still under development, so detailed usage guides beyond this have not yet been written about the project's functionality. Please see the other sections of this documentation for examples, definition indices, and more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using OAR, Dates\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"assets/logo.png\" width=\"300\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"DCCR","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"These pages serve as the official documentation for the DCCR (Deep Clustering Context Recognition) project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The DCCR project is a development workspace for experiments targeting the clustering of deep features extracted from multi-object classifiers on simulated AirSim imagery. Due to the open-ended nature of the research, many tools and types of experiments are involved. As a result, please see the relevant documentation sections about the various programming languages, tools, and experiments involved throughout the repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is developed and maintained by Sasha Petrenko <petrenkos@mst.edu> on behalf of the Missouri University of Science and Technology (MS&T) Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is split into the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"../examples/index.md\",\n    \"man/contributing.md\",\n    \"man/full-index.md\",\n    \"man/dev-index.md\",\n]\nDepth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Package Guide provides a tutorial to the full usage of the package, while Examples gives sample workflows with the various experiments of the project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Contributing section outlines how to contribute to the project. The Index enumerates all public types, functions, and other components with docstrings, whereas internals are listed in the Developer's Index.","category":"page"},{"location":"#About-These-Docs","page":"Home","title":"About These Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Though several different programming languages are used throughout the project, these docs are built around the Julia component of the project using the Documenter.jl package.","category":"page"},{"location":"#Documentation-Build","page":"Home","title":"Documentation Build","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation was built using Documenter.jl with the following version and OS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DCCR, Dates # hide\nprintln(\"DCCR v$(DCCR_VERSION) docs built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"}]
}
